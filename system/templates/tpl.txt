#include <boost/random.hpp>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

static const char* rating_equivalent (const int, const double);

boost::lagged_fibonacci1279 rng (time(0));

int main(int argc, char** argv)
{
    puts ("");
    puts ("generation of analysis results starting...");

    bool show_projection_details = argc > 1 && (*argv[1] == 'Y');

    int fy[$n-years$+1];

    $declarations$

    double min_metric1[$n-years$+1];
    double max_metric1[$n-years$+1];
    for(int y=0;y<$n-years$+1;y++) 
    {
	min_metric1[y] = 0x7fffffff;
	max_metric1[y] = -0x7fffffff;
    }

    // ratios
    double ratios[5][$n-years$+1];

    bool defaultflag[$n-years$+1];
    bool cumdefaultflag[$n-years$+1];
    long defaultcntr[$n-years$+1];
    long cumdefaultcntr[$n-years$+1];
    
    for(int y=0;y<$n-years$+1;y++) cumdefaultcntr[y] = defaultcntr[y] = 0;

    // create output files and write header lines
    FILE* fr=fopen("results.tab","w");
    FILE* fp=fopen("projection.tab","w");

    fprintf(fr,"PSCF Fiscal Projection\n");
    fprintf(fr,"Government Entity\t%s\n", "\"$government-entity$\"");
    fprintf(fr,"Model Description\t%s\n", "\"$model-description$\"");
    fprintf(fr,"Currency Units in\t%s\n", "\"$currency-units-in$\"");
    fprintf(fr,"Trials\t%s\n", "\"$trials$\"");
    fprintf(fr,"Run Date/Time\t%s\n", "\"$run-date-time$\"");
    fprintf(fr,"\n");

    if (show_projection_details)
    {
	fprintf(fp,"PSCF Fiscal Projection\n");
	fprintf(fp,"Government Entity\t%s\n", "\"$government-entity$\"");
	fprintf(fp,"Model Description\t%s\n", "\"$model-description$\"");
	fprintf(fp,"Currency Units in\t%s\n", "\"$currency-units-in$\"");
	fprintf(fp,"Trials\t%s\n", "\"$trials$\"");
	fprintf(fp,"Run Date/Time\t%s\n", "\"$run-date-time$\"");
	fprintf(fp,"\n");

	fprintf(fp,"Fiscal Year\t");

	fprintf(fp,"$headers$");

	fprintf(fp,"\t%s", "$metrics-1-description$");
	$if-ratio2-valid$ fprintf(fp,"\t%s", "$metrics-2-description$");
	$if-ratio3-valid$ fprintf(fp,"\t%s", "$metrics-3-description$");
	$if-ratio4-valid$ fprintf(fp,"\t%s", "$metrics-4-description$");
	$if-ratio5-valid$ fprintf(fp,"\t%s", "$metrics-5-description$");
    
	fprintf(fp,"\t%s Flag\tCumulative %s Flag\n\n",
	    "$threshold-label$", "$threshold-label$");
    }

    // run the projection maxtrials times
    for(int trialcnt=1;trialcnt<=$number-of-trials$;trialcnt++)
    {
        // initialize period 0 values
        fy[0] = $initial-year$;
        
        $period-0-values$

        // Ratios
	ratios[0][0] = $threshold-expression-1[0]$;
	$if-ratio2-valid$ ratios[1][0] = $threshold-expression-2[0]$;
	$if-ratio3-valid$ ratios[2][0] = $threshold-expression-3[0]$;
	$if-ratio4-valid$ ratios[3][0] = $threshold-expression-4[0]$;
	$if-ratio5-valid$ ratios[4][0] = $threshold-expression-5[0]$;

	min_metric1[0] = max_metric1[0] = ratios[0][0];

	cumdefaultflag[0] = false;

	if($threshold-expression-1[0]$ $thresh-relation$ $thresholdlevel$)
	{
	    defaultflag[0] = true;
	    cumdefaultflag[0] = true;

	    defaultcntr[0]++;
	}
	else
	    defaultflag[0] = false;

	if (cumdefaultflag[0]) cumdefaultcntr[0]++;

	$unirandom-declarations$

	$normrandom-declarations$

	$cauchyrandom-declarations$

        for(int y=1;y<$n-years$+1;y++)
        {
	    $unirandom-assignments$

	    $normrandom-assignments$

	    $cauchyrandom-assignments$

            fy[y] = fy[y-1] + 1;

            $assignments$

            // Ratios
	    ratios[0][y] = $threshold-expression-1[y]$;
	    $if-ratio2-valid$ ratios[1][y] = $threshold-expression-2[y]$;
	    $if-ratio3-valid$ ratios[2][y] = $threshold-expression-3[y]$;
	    $if-ratio4-valid$ ratios[3][y] = $threshold-expression-4[y]$;
	    $if-ratio5-valid$ ratios[4][y] = $threshold-expression-5[y]$;

	    cumdefaultflag[y] = cumdefaultflag[y-1];

	    if($threshold-expression-1[y]$ $thresh-relation$ $thresholdlevel$)
	    {
		defaultflag[y] = true;
		cumdefaultflag[y] = true;

		defaultcntr[y]++;
	    }
	    else
		defaultflag[y] = false;

	    if (cumdefaultflag[y]) cumdefaultcntr[y]++;

	    $adjustments$

	    if (ratios[0][y] > max_metric1[y]) max_metric1[y] = ratios[0][y];
	    if (ratios[0][y] < min_metric1[y]) min_metric1[y] = ratios[0][y];
        }

	if (show_projection_details)
	{
	    fprintf(fp,"Trial %8.0d\n\n",trialcnt);

	    for(int y=0;y<$n-years$+1;y++)
	    {
		fprintf(fp,"%5.0d\t",fy[y]);

		if(y>0)
		{
		    $print-random-values$
		}
		else 
		{
		    $print-y0-random-values$
		}

		$output$

		fprintf(fp,"\t");

		if(y>0)
		{
		    fprintf(fp,"%5.4f\t",ratios[0][y]);
		    $if-ratio2-valid$ fprintf(fp,"%5.4f\t",ratios[1][y]);
		    $if-ratio3-valid$ fprintf(fp,"%5.4f\t",ratios[2][y]);
		    $if-ratio4-valid$ fprintf(fp,"%5.4f\t",ratios[3][y]);
		    $if-ratio4-valid$ fprintf(fp,"%5.4f\t",ratios[4][y]);
		}
		else
		{
		    if ($print-ratios(1)$)
			fprintf(fp,"%5.4f\t",ratios[0][0]);
		    else
			fprintf(fp,"%s\t","");

		    $if-ratio2-valid$ if ($print-ratios(2)$)
		    $if-ratio2-valid$ fprintf(fp,"%5.4f\t",ratios[1][0]);
		    $if-ratio2-valid$ else
		    $if-ratio2-valid$ fprintf(fp,"%s\t","");

		    $if-ratio3-valid$ if ($print-ratios(3)$)
		    $if-ratio3-valid$ fprintf(fp,"%5.4f\t",ratios[2][0]);
		    $if-ratio3-valid$ else
		    $if-ratio3-valid$ fprintf(fp,"%s\t","");

		    $if-ratio4-valid$ if ($print-ratios(4)$)
		    $if-ratio4-valid$ fprintf(fp,"%5.4f\t",ratios[3][0]);
		    $if-ratio4-valid$ else
		    $if-ratio4-valid$ fprintf(fp,"%s\t","");

		    $if-ratio5-valid$ if ($print-ratios(5)$)
		    $if-ratio5-valid$ fprintf(fp,"%5.4f\t",ratios[4][0]);
		    $if-ratio5-valid$ else
		    $if-ratio5-valid$ fprintf(fp,"%s\t","");
		}

		fprintf(fp,"%i\t",defaultflag[y]);
		fprintf(fp,"%i",cumdefaultflag[y]);

		fprintf(fp,"\n");
	    }

	    fprintf(fp,"\n\n");
	}
    }

    fprintf(fr,"Year\t$threshold-label$ Count\t$threshold-label$ Probability\tCumulative $threshold-label$ Count\tCumulative $threshold-label$ Probability\tRating Equivalent");

    fprintf(fr,"\t\t%s\t%s\n", "Minimum $metrics-1-description$", "Maximum $metrics-1-description$");

	fprintf(fp,"\t%s", "$metrics-1-description$");
    for(int y=0;y<$n-years$+1;y++)
    {
        fprintf(fr,"%d\t",fy[y]);
        fprintf(fr,"%ld\t",defaultcntr[y]);
        fprintf(fr,"%5.4f\t", double(defaultcntr[y]) / $number-of-trials$);
        fprintf(fr,"%ld\t",cumdefaultcntr[y]);
        fprintf(fr,"%5.4f\t", double(cumdefaultcntr[y]) / $number-of-trials$);

	double rating = double(cumdefaultcntr[y]) / $number-of-trials$;
        fprintf(fr,"%s", rating_equivalent(y,rating));

        fprintf(fr,"\t\t%5.4f\t%5.4f\n", min_metric1[y], max_metric1[y]); 
    }

    puts ("");

    if (show_projection_details)
	puts ("generation finished: files 'results.tab' & 'projection.tab' created");
    else
	puts ("generation finished: file 'results.tab' created");
    puts ("");
    
    return 0;
}

/* -------------------------------------------------- */

static const char* rating_equivalent (const int year, const double rating_value)
{
    if (year == 0) return "N/A";

    static const char* rating[$n-ratings$] = {$ratings$};

    static double rating_grid[$n-years$][$n-ratings$] =
    {
	$rating-grid$
    };

    double* year_rating = rating_grid[year-1];

    for (int i = 0;  i < $n-ratings$;  i++)
        if (rating_value <= year_rating[i])
	    return rating[i];

    return "???";
}
